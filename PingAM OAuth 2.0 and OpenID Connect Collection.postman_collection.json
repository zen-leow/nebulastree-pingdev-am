{
	"info": {
		"_postman_id": "7c3a910d-f96d-465c-b4ee-a249d8064455",
		"name": "PingAM OAuth 2.0 and OpenID Connect Collection",
		"description": "This collection contains the OAuth 2.0 and OpenID Connect flows that AM supports, and provides the ability for you to try them out. \n\nBefore you get started, edit the ForgeRock OAuth 2.0 Grant Flows to set the variables provided to match your setup under the Variables tab.\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "921553"
	},
	"item": [
		{
			"name": "Prerequisites",
			"item": [
				{
					"name": "Step 1: Log In as an Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if(pm.response.code == 200)",
									"{",
									"    pm.collectionVariables.set(\"adminSSOToken\", jsonData.tokenId);",
									"}",
									"",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains tokenId\", function () {",
									"    pm.expect(jsonData).to.have.any.keys('tokenId');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-API-Version",
								"value": "resource=2.1"
							},
							{
								"key": "X-OpenAM-Username",
								"value": "{{admin_username}}",
								"type": "text"
							},
							{
								"key": "X-OpenAM-Password",
								"value": "{{admin_password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL_base}}/json/realms/root/authenticate",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"root",
								"authenticate"
							]
						},
						"description": "Log in to AM as an administrative user to create the objects and identities in AM that the collection requires."
					},
					"response": []
				},
				{
					"name": "Step 2: Create a SubRealm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// TESTS",
									"",
									"pm.test(\"Status code is 201.\", () => {",
									"  pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Response contains an ID\", function () {",
									"    pm.expect(jsonData).to.have.any.keys('_id');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}"
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=1.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{sub_realm}}\",\n    \"active\": true,\n    \"parentPath\": \"/\",\n    \"aliases\": [ \"oauth2.example.com\" ]\n}"
						},
						"url": {
							"raw": "{{URL_base}}/json/global-config/realms",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"global-config",
								"realms"
							]
						},
						"description": "Create a subrealm, under which everything created in this collection will be stored."
					},
					"response": []
				},
				{
					"name": "Step 3: Create an OAuth 2.0 Provider Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"",
									"pm.test(\"Status code is 201.\", () => {",
									"  pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=1.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"advancedOAuth2Config\":{\n      \"responseTypeClasses\":[\n         \"code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler\",\n         \"device_code|org.forgerock.oauth2.core.TokenResponseTypeHandler\",\n         \"token|org.forgerock.oauth2.core.TokenResponseTypeHandler\",\n         \"id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler\"\n      ],\n      \"grantTypes\":[\n         \"implicit\",\n         \"refresh_token\",\n         \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n         \"password\",\n         \"client_credentials\",\n         \"urn:ietf:params:oauth:grant-type:device_code\",\n         \"authorization_code\",\n         \"urn:openid:params:grant-type:ciba\",\n         \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n         \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n         \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/services/oauth-oidc?_action=create",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"{{sub_realm}}",
								"realm-config",
								"services",
								"oauth-oidc"
							],
							"query": [
								{
									"key": "_action",
									"value": "create"
								}
							]
						},
						"description": "AM must be configured as an OAuth 2.0 authorization server. It must also be able to issue OpenID Connect ID tokens."
					},
					"response": []
				},
				{
					"name": "Step 4: Create a Demo User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"Status code is 201.\", () => {",
									"  pm.expect(pm.response.code).to.eql(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-API-Version",
								"value": "protocol=2.1,resource=3.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{demo_username}}\",\n    \"userpassword\": \"{{demo_password}}\",\n    \"mail\": \"demo.user@example.com\"\n}"
						},
						"url": {
							"raw": "{{URL_base}}/json/realms/{{sub_realm}}/users/?_action=create",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"{{sub_realm}}",
								"users",
								""
							],
							"query": [
								{
									"key": "_action",
									"value": "create"
								}
							]
						},
						"description": "A demonstration user that will be the resource owner/end user across most of the calls."
					},
					"response": []
				},
				{
					"name": "Step 5: Create a Confidential Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"Status code is 201.\", () => {",
									"  pm.expect(pm.response.code).to.eql(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "ForgeRock Collection",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coreOAuth2ClientConfig\": {  \n    \"userpassword\": \"{{client_secret}}\",\n     \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"{{redirect_uri}}\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"write\",\n        \"read\",\n        \"share\",\n        \"print\",\n        \"copy\",\n        \"delete\",\n        \"manage\",\n        \"edit\",\n        \"openid\",\n        \"profile\"\n      ]\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"password\",\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": false,\n      \"value\":  \"client_secret_post\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/agents/OAuth2Client/{{confidential_client_id}}",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"{{sub_realm}}",
								"realm-config",
								"agents",
								"OAuth2Client",
								"{{confidential_client_id}}"
							]
						},
						"description": "A confidential client, used in some of the grant flows."
					},
					"response": []
				},
				{
					"name": "Step 6: Create a Public Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"Status code is 201.\", () => {",
									"  pm.expect(pm.response.code).to.eql(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "ForgeRock OAuth Collection"
							},
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"coreOAuth2ClientConfig\": { \n     \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"{{redirect_uri}}\"\n      ]\n    },\n      \"clientType\": {\n      \"inherited\": false,\n      \"value\": \"Public\"\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"write\",\n        \"read\",\n        \"share\",\n        \"print\",\n        \"copy\",\n        \"delete\",\n        \"manage\",\n        \"edit\",\n        \"openid\",\n        \"profile\"\n      ]\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n         \"password\",\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": false,\n      \"value\":  \"client_secret_post\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/agents/OAuth2Client/{{public_client_id}}",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"{{sub_realm}}",
								"realm-config",
								"agents",
								"OAuth2Client",
								"{{public_client_id}}"
							]
						},
						"description": "A public client, used in some of the grant flows.  Public clients do not have client secrets."
					},
					"response": []
				},
				{
					"name": "Step 7: Log out the Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"",
									"pm.test(\"Status code is 200.\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{adminSSOToken}}",
								"type": "text"
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"realms",
								"{{sub_realm}}",
								"sessions",
								""
							],
							"query": [
								{
									"key": "_action",
									"value": "logout"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Follow these steps to set up the prerequisites needed to run each OAuth 2.0 Grant Flow.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OAuth 2.0 Flows",
			"item": [
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "write ",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 4: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 5: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Authorization Code grant is a two-step interactive process used when a client, for example, a Java application running on a server, requires access to protected resources.\n\nThe Authorization Code grant is the most secure of all the OAuth 2.0 grants for the following reasons:\n\nIt is a two-step process: the user must authenticate and authorize the client to see the resources and the authorization server must validate the code again before issuing the access token.\n\t\nThe authorization server delivers the access token directly to the client, usually over HTTPS. The client secret is never exposed publicly, which protects confidential clients.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization Code Grant with PKCE",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "write ",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code from the previous step.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the \"Pre-request Script\" tab of \"Step 2\" for details.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 4: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Authorization Code Grant, when combined with the PKCE standard (RFC 7636), is used when a client, usually a mobile or a JavaScript application, requires access to protected resources.\n\nThe flow is similar to the regular Authorization Code Grant type, but the client must generate a code that will be part of the communication between the client and the authorization server. This code mitigates against interception attacks performed by malicious users.\n\nSince communication between the client and the authorization server is not secure, clients are usually public so their secrets do not get compromised. Also, browser-based clients making OAuth 2.0 requests to different domains must implement Cross-Origin Resource Sharing (CORS) calls to access OAuth 2.0 resources in different domains.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization Code Grant with PAR",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Request URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 201)",
											"{",
											"    pm.collectionVariables.set(\"request_uri\", jsonData.request_uri);",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "write",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/par",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"par"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "write ",
											"type": "text",
											"disabled": true
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize?request_uri={{request_uri}}&client_id={{public_client_id}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									],
									"query": [
										{
											"key": "request_uri",
											"value": "{{request_uri}}"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}"
										}
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": []
						},
						{
							"name": "Step 4: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code from the previous step.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the \"Pre-request Script\" tab of \"Step 2\" for details.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 5: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "A pushed authorization request (PAR) enables an OAuth client to push the payload of an authorization request directly to the authorization server.  \n\nA request URI value is received in in exchange, which is used as a reference to the authorization request payload data in a subsequent call to the authorization endpoint via the user agent, which in this case is the Authorization Code grant flow.\n\nPAR fosters OAuth security by providing clients a simple means for a confidential and integrity protected authorization request.\n\nPAR allows the authorization server to authenticate the client before any user interaction happens.  The increased confidence in the identity of the client during the authorization process allows the authorization server to refuse illegitimate requests much earlier in the process, which can prevent attempts to spoof clients or otherwise tamper with or misuse an authorization request.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Implicit Grant",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.0, protocol=1.0"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function QueryStringToJSON(qs) {            ",
											"    var keyvaluepairs = qs.slice(qs.indexOf(\"#\")+1).split('&');",
											"    ",
											"    var result = {};",
											"    keyvaluepairs.forEach(function(keyvaluepair) {",
											"        keyvaluepair = keyvaluepair.split('=');",
											"        result[keyvaluepair[0]] = decodeURIComponent(keyvaluepair[1] || '');",
											"    });",
											"    return JSON.parse(JSON.stringify(result));",
											"}",
											"",
											"if(pm.response.code == 302)",
											"{",
											"   let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.collectionVariables.set(\"implicitGrantAccessToken\", redirectLocation.access_token);",
											"}",
											"else",
											"{",
											"    pm.collectionVariables.set(\"implicitGrantAccessToken\", \"ERROR: 302 not returned!\");",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is NOT enabled in Postman (Status code is 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Response `Location` header contained `code` parameter\", () => {",
											"    let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.expect(redirectLocation.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the access token. When using a browser, the user would consent that the client can access their information. ",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Implicit grant is designed for public clients that run inside the resource owner's user-agent, for example, JavaScript applications.\n\nSince applications running in the user-agent are considered less trusted than applications running in servers, the authorization server will never issue refresh tokens in this flow. There is a security impact of cross-site scripting (XSS) attacks that could leak the access token to other systems, and implement Cross-Origin Resource Sharing (CORS) to make OAuth 2.0 requests to different domains.\n\nDue to the security implications of this flow, it is recommended to use the Authorization Code grant with PKCE flow whenever possible.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client Credentials Grant",
					"item": [
						{
							"name": "Step 1: Get Access Token as a Confidential Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "print",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Sends the confidential client credentials to the authorization server to get authenticated, and request an access token."
							},
							"response": []
						},
						{
							"name": "Step 2: Introspect the Access Token ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						}
					],
					"description": "The Client Credentials grant is used when a client is also the resource owner and is accessing its own data instead of acting in behalf of a user. For example, an application that needs access to a protected resource to retrieve its own data to perform a task, or update its configuration, would use the Client Credentials grant to acquire an access token.\n\nThe Client Credentials Grant flow supports confidential clients only.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Device Flow",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get User Code and Device Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"user_code\", jsonData.user_code);",
											"        pm.collectionVariables.set(\"device_code\", jsonData.device_code);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains `user_code`.\", function () {",
											"    pm.expect(jsonData.user_code).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains `device_code`.\", function () {",
											"    pm.expect(jsonData.device_code).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "response_type",
											"value": "device_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/device/code",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"device",
										"code"
									]
								},
								"description": "Receive a user code and a device code, which can be used to provide consent.\n\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Grant Consent Using the User Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains 'done: true'.\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"done: true\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"description": "SSO token to protect against cross-site request forgery.",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the scopes in the request (to the client).",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "user_code",
											"value": "{{user_code}}",
											"description": "The user code for the device.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/device/user",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"device",
										"user"
									]
								},
								"description": "Grants consent using the user code recieved in the previous call to let the client device access the user's resources."
							},
							"response": []
						},
						{
							"name": "Step 4: Poll for Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Status code is not 400 - Polling too Quickly\", () => {",
											"  // The polling interval has not elapsed since the last request.  ",
											"  pm.expect(pm.response.code).to.not.eql(400);",
											"});",
											"",
											"pm.test(\"Status code is not 401 - Token not valid\", () => {",
											"  // The request contains a token no longer valid.  ",
											"  pm.expect(pm.response.code).to.not.eql(401);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:device_code",
											"type": "text"
										},
										{
											"key": "device_code",
											"value": "{{device_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Poll the authorization server for an access token, to find out whether the resource owner has already given consent or not.\n\nIf the user has given consent, AM returns an access token."
							},
							"response": []
						},
						{
							"name": "Step 5: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Device Flow is designed for client devices that have limited user interfaces, such as a set-top box, streaming radio, or a server process running on a headless operating system.\n\nRather than logging in by using the client device itself, you can authorize the client to access protected resources on your behalf by logging in with a different user agent, such as an Internet browser or smartphone, and entering a code displayed on the client device.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Device Flow with PKCE",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get User Code and Device Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"user_code\", jsonData.user_code);",
											"        pm.collectionVariables.set(\"device_code\", jsonData.device_code);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains `user_code`.\", function () {",
											"    pm.expect(jsonData.user_code).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains `device_code`.\", function () {",
											"    pm.expect(jsonData.device_code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "response_type",
											"value": "device_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "manage",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See pre-request script.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/device/code",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"device",
										"code"
									]
								},
								"description": "Receive a user code and a device code, which can be used to provide consent.\n\n\n\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Grant Consent Using the User Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains 'done: true'.\",() => {",
											"  pm.expect(pm.response.text()).to.include(\"done: true\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"description": "SSO token to protect against cross-site request forgery.",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "decision",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "user_code",
											"value": "{{user_code}}",
											"description": "The user code for the device.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/device/user",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"device",
										"user"
									]
								},
								"description": "Grants consent using the user code recieved in the previous call to allow the client device to access resources."
							},
							"response": []
						},
						{
							"name": "Step 4: Poll for Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Status code is not 400 - Polling too Quickly\", () => {",
											"  // The polling interval has not elapsed since the last request.  ",
											"  pm.expect(pm.response.code).to.not.eql(400);",
											"});",
											"",
											"pm.test(\"Status code is not 401 - Token not valid\", () => {",
											"  // The request contains a token no longer valid.  ",
											"  pm.expect(pm.response.code).to.not.eql(401);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:device_code",
											"type": "text"
										},
										{
											"key": "device_code",
											"value": "{{device_code}}",
											"description": "The device code for the device.",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the Pre-request script in the previous step.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Poll the authorization server for an access token, to find out whether the resource owner has already given consent or not."
							},
							"response": []
						},
						{
							"name": "Step 5: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Device Flow is designed for client devices that have limited user interfaces, such as a set-top box. Since the devices are usually public clients and the device code can be intercepted by malicious users, you can combine the Device Flow with the PKCE standard (RFC 7636) to mitigate against interception attacks if the devices allow it.\n\nThis flow is beyond the PKCE and the Device Flow specs, since the Device Flow spec is still a draft and it is not officially recognized by the PKCE standard.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Resource Owner Password Credentials Grant",
					"item": [
						{
							"name": "Step 1: Get Access Token as a Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(jsonData.access_token && jsonData.access_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"}",
											"",
											"if(jsonData.refresh_token && jsonData.refresh_token != \"\")",
											"{",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{demo_username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{demo_password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Sends the confidential client credentials to the authorization server to get authenticated, and request an access token."
							},
							"response": []
						},
						{
							"name": "Step 2: Introspect the Access Token ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The secret of the Confidential OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						}
					],
					"description": "The Resource Owner Password Credentials (ROPC) grant flow allows the client to use the resource owner's user name and password to get an access token.\n\nSince the resource owner shares their credentials with the client, this flow is deemed the most insecure of the OAuth 2.0 flows. The resource owner's credentials can potentially be leaked or abused by the client application, and the resource owner has no control over the authorization process.\n\nYou should implement the ROPC grant flow only if the resource owner has a trust relationship with the client (such as the device operating system, or a highly privileged application).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "OAuth 2.0 Flows"
		},
		{
			"name": "Dynamic Client Registration",
			"item": [
				{
					"name": "With Software Statement",
					"item": [
						{
							"name": "Prerequisites",
							"item": [
								{
									"name": "Step 1: Log In as an Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200)",
													"{",
													"    pm.collectionVariables.set(\"adminSSOToken\", jsonData.tokenId);",
													"}",
													"",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains tokenId\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('tokenId');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											},
											{
												"key": "X-OpenAM-Username",
												"value": "{{admin_username}}",
												"type": "text"
											},
											{
												"key": "X-OpenAM-Password",
												"value": "{{admin_password}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/realms/root/authenticate",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"root",
												"authenticate"
											]
										},
										"description": "Log in to AM as an administrative user to create the objects and identities in AM that the collection requires."
									},
									"response": []
								},
								{
									"name": "Step 2: Register Software Publisher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"var msg = 'Unable to access SMS config: Identity '+ pm.environment.get('agent_id')+' of type agentonly already exists.';",
													"",
													"pm.test(\"Status code is 201 (or 412 if already created).\", () => {",
													"  pm.expect(pm.response.code).to.be.oneOf([201, 412], msg);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"var currentTimestamp = Math.floor(Date.now() / 1000);",
													"var agentId = 'software-publisher-' + currentTimestamp;",
													"pm.environment.set('agent_id', agentId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept-API-Version",
												"value": "protocol=2.0,resource=1.0"
											},
											{
												"key": "If-None-Match",
												"value": "*"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"_id\": \"{{agent_id}}\",\n    \"publicKeyLocation\": {\n        \"value\": \"jwks\",\n        \"inherited\": false\n    },\n    \"jwksCacheTimeout\": {\n        \"value\": 3600000,\n        \"inherited\": false\n    },\n    \"softwareStatementSigningAlgorithm\": {\n        \"value\": \"HS256\",\n        \"inherited\": false\n    },\n    \"jwkSet\": {\n        \"value\": \"{“keys”: [{“kty”: “oct”, “k”: “secret”, “alg”:“HS256”}]}\",\n        \"inherited\": false\n    },\n    \"issuer\": {\n        \"value\": \"https://client.example.com\",\n        \"inherited\": false\n    },\n    \"jwkStoreCacheMissCacheTime\": {\n        \"value\": 60000,\n        \"inherited\": false\n    },\n    \"jwksUri\": {\n        \"value\": \"\",\n        \"inherited\": false\n    },\n    \"_type\": {\n        \"_id\": \"SoftwarePublisher\",\n        \"name\": \"OAuth2 Software Publisher\",\n        \"collection\": true\n    },\n    \"agentgroup\": \"\", \n\"userpassword\": \"secret\"\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/agents/SoftwarePublisher/{{agent_id}}",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"realm-config",
												"agents",
												"SoftwarePublisher",
												"{{agent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 3: Set Software Statement Required and iat attribute required",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains _id\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('_id');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var jwtTokenUnreasonableLifetime = 86400;",
													"pm.environment.set('jwt_token_unreasonable_lifetime', jwtTokenUnreasonableLifetime);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept-API-Version",
												"value": "protocol=1.0,resource=1.0"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"_id\": \"\",\n    \"_type\": {\n        \"_id\": \"oauth-oidc\",\n        \"name\": \"OAuth2 Provider\",\n        \"collection\": false\n    },\n    \"dynamicClientRegistrationScope\": \"dynamic_client_registration\",\n    \"dynamicClientRegistrationSoftwareStatementRequired\": true,\n    \"requiredSoftwareStatementAttestedAttributes\": [\n        \"redirect_uris\",\n        \"iat\"\n    ],\n    \"allowDynamicRegistration\": true,\n    \"forgerock-oauth2-provider-jwt-token-lifetime\": {{jwt_token_unreasonable_lifetime}}\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/services/oauth-oidc",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"realm-config",
												"services",
												"oauth-oidc"
											]
										}
									},
									"response": []
								}
							],
							"description": "This section performs setup for Dynamic Client Registration using Software Statement, where the Software Statement has been set to be mandatory, and the 'iat' attribute is a required Software Statement Attested Attribute."
						},
						{
							"name": "Step 1: iat present in Software Statement (iat = now)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var secret =  'secret'",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"var currentTimestamp = Math.floor(Date.now() / 1000);",
											"var iat = currentTimestamp;",
											"pm.environment.set('iat_now',iat);",
											"",
											"var aud = pm.environment.get('URL_base') + '/oauth2/' + pm.collectionVariables.get('sub_realm');",
											"var data = {",
											"    'sub': \"4NRB1-0XZABZI9E6-5SM3R\",",
											"    'aud': aud,",
											"\t'iss': 'https://client.example.com',",
											"\t'iat': iat,",
											"\t'exp': currentTimestamp + 1000,",
											"    'redirect_uris': [",
											"    \"https://client.example.com/callback\"",
											"  ]",
											"}",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, secret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('software_statement', signedToken)",
											"console.log(signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 201.\", () => {",
											"  pm.expect(pm.response.code).to.eql(201);",
											"});",
											"",
											"pm.test(\"Response contains client_id\", function () {",
											"    pm.expect(jsonData).to.have.any.keys('client_id');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{adminSSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirect_uris\": \"https://client.example.com:8443/callback\",\n    \"client_name\": \"SoftStateTest\",\n    \"client_uri\": \"https://client.example.com/\",\n    \"iat\": \"{{iat_now}}\",\n    \"software_statement\": \"{{software_statement}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/connect/register",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"connect",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"description": "Dynamic Client Registration using Software Statement"
				}
			],
			"description": "Dynamic Client Registration"
		},
		{
			"name": "OpenID Connect Flows",
			"item": [
				{
					"name": "Authorization Code Grant",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Authorization Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "profile openid",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token and an ID token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if (pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"   pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains id_token\", function () {",
											"     pm.expect(jsonData.id_token).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 4: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 5: Get ID Token Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct `aud`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{id_token}}",
											"description": "ID token you want the information from",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve information about the ID token. For example, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 6: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Authorization Code grant is a two-step interactive process used when a client, for example, a Java application running on a server, requires access to protected resources.\n\nThe Authorization Code grant is the most secure of all the OAuth 2.0 grants for the following reasons:\n\nIt is a two-step process: the user must authenticate and authorize the client to see the resources and the authorization server must validate the code again before issuing the access token.\n\t\nThe authorization server delivers the access token directly to the client, usually over HTTPS. The client secret is never exposed publicly, which protects confidential clients.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization Code Grant with PKCE",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2a: Get Authorization Code (httpbin.org)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"/*",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See the \"Pre-request Script\" tab for details.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 2b: Get Authorization Code (localhost)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//var jsonData = pm.response.json();",
											"const querystring = require('querystring');",
											"let params = pm.response.headers.get('Location').split('?');",
											"if(pm.response.code == 302)",
											"{",
											"    pm.collectionVariables.set(\"authorization_code\",querystring.parse(params[1]).code);",
											"    pm.test(\"Response from authorize endpoint contained `code` argument in Location header\", () => {",
											"    pm.expect(querystring.parse(params[1]).code).to.be.a(\"string\");",
											"});",
											"}",
											"",
											"// TESTS",
											"/*",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"*/",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See the \"Pre-request Script\" tab for details.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if (pm.response.code == 200) {",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"    pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"pm.test(\"Response contains id_token\", function () {",
											"     pm.expect(jsonData.id_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "The grant type required for the Authorization Code with PKCE grant.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code from the previous step.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the \"Pre-request Script\" tab of \"Step 2\" for details.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 4: Get ID Token Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `aud`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"public_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{id_token}}",
											"description": "ID token you want the information from",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve information about the ID token. For example, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 5a: Check id_token Session (httpbin.org)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize?client_id={{confidential_client_id}}&response_type=none&id_token_hint={{id_token}}&prompt=none&redirect_uri={{redirect_uri}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}"
										},
										{
											"key": "response_type",
											"value": "none"
										},
										{
											"key": "id_token_hint",
											"value": "{{id_token}}"
										},
										{
											"key": "prompt",
											"value": "none"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										}
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 5b: Check id_token Session (localhost)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//var jsonData = pm.response.json();\r",
											"const querystring = require('querystring');\r",
											"let params = pm.response.headers.get('Location').split('?');\r",
											"if(pm.response.code == 302)\r",
											"{\r",
											"    if (params.length > 1) {\r",
											"        console.log(querystring.parse(params[1]).error_description);\r",
											"        pm.test(\"Response from authorize endpoint contained `error_description` argument in Location header\", () => {\r",
											"            pm.expect(querystring.parse(params[1]).error_description).to.be.a(\"string\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Session still valid\");\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize?client_id={{confidential_client_id}}&response_type=none&id_token_hint={{id_token}}&prompt=none&redirect_uri={{redirect_uri}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}"
										},
										{
											"key": "response_type",
											"value": "none"
										},
										{
											"key": "id_token_hint",
											"value": "{{id_token}}"
										},
										{
											"key": "prompt",
											"value": "none"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										}
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 6a: Refresh Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=4.0, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=getSessionInfoAndResetIdleTime",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "getSessionInfoAndResetIdleTime"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6b: Refresh Tokens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"        pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"        pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"}",
											"",
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains refresh_token\", function () {",
											"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "The refresh token.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Use a refresh token to ask for a new access token."
							},
							"response": []
						},
						{
							"name": "Step 7a: Log out specific Demo User Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7b: Log out all Demo User Sessions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=5.1, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{demo_username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logoutByUser",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logoutByUser"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7c: Revoke the Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"description": "The refresh token to revoke.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/token/revoke",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"token",
										"revoke"
									]
								},
								"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
							},
							"response": []
						},
						{
							"name": "Step 7d: Revoke the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"description": "The refresh token to revoke.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/token/revoke",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"token",
										"revoke"
									]
								},
								"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
							},
							"response": []
						},
						{
							"name": "endSession",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/connect/endSession?id_token_hint={{id_token}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"connect",
										"endSession"
									],
									"query": [
										{
											"key": "id_token_hint",
											"value": "{{id_token}}"
										}
									]
								},
								"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
							},
							"response": []
						},
						{
							"name": "Get UserInfo using Access Token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/userinfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"userinfo"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Authorization Code Grant, when combined with the PKCE standard (RFC 7636), is used when a client, usually a mobile or a JavaScript application, requires access to protected resources.\n\nThe flow is similar to the regular Authorization Code Grant type, but the client must generate a code that will be part of the communication between the client and the authorization server. This code mitigates against interception attacks performed by malicious users.\n\nSince communication between the client and the authorization server is not secure, clients are usually public so their secrets do not get compromised. Also, browser-based clients making OAuth 2.0 requests to different domains must implement Cross-Origin Resource Sharing (CORS) calls to access OAuth 2.0 resources in different domains.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Authorization Code Grant with PKCE (DNS Alias)",
					"item": [
						{
							"name": "Step 1a: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 1b: Log in as the Demo User (Specific Tree)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId != null && jsonData.tokenId.length > 3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_base}}/json/authenticate?authIndexType=service&authIndexValue=Simple1FA",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"authenticate"
									],
									"query": [
										{
											"key": "authIndexType",
											"value": "service"
										},
										{
											"key": "authIndexValue",
											"value": "Simple1FA"
										}
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2a: Get Authorization Code (httpbin.org)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"/*",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See the \"Pre-request Script\" tab for details.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 2b: Get Authorization Code (localhost)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//var jsonData = pm.response.json();",
											"const querystring = require('querystring');",
											"let params = pm.response.headers.get('Location').split('?');",
											"if(pm.response.code == 302)",
											"{",
											"    pm.collectionVariables.set(\"authorization_code\",querystring.parse(params[1]).code);",
											"    pm.test(\"Response from authorize endpoint contained `code` argument in Location header\", () => {",
											"    pm.expect(querystring.parse(params[1]).code).to.be.a(\"string\");",
											"});",
											"}",
											"",
											"// TESTS",
											"/*",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"*/",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.collectionVariables.set(\"code_challenge\", code_challenge);",
											"pm.collectionVariables.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information",
											"type": "text"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}",
											"description": "The generated code challenge. See the \"Pre-request Script\" tab for details.",
											"type": "text"
										},
										{
											"key": "code_challenge_method",
											"value": "S256",
											"description": "The method used to generate the code challenge.",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"authorize"
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if (pm.response.code == 200) {",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"    pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"}",
											"",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"pm.test(\"Response contains id_token\", function () {",
											"     pm.expect(jsonData.id_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "The grant type required for the Authorization Code with PKCE grant.",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "The authentication code from the previous step.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"description": "The ID of the Confidential OAuth Client.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"description": "The complete URI to which client redirects the user if the request is successful.",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"description": "The generated code verifier. See the \"Pre-request Script\" tab of \"Step 2\" for details.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"access_token"
									]
								},
								"description": "Make a call to the authorization server to exchange the authorization code for an access token."
							},
							"response": []
						},
						{
							"name": "Step 4: Get ID Token Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `aud`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"public_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{id_token}}",
											"description": "ID token you want the information from",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"idtokeninfo"
									]
								},
								"description": "Retrieve information about the ID token. For example, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 5a: Check id_token Session (httpbin.org)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    if(jsonData.args.code && jsonData.args.code != \"\") {",
											"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
											"    }",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.not.have.status(302);",
											"});",
											"",
											"pm.test(\"Response from httpbin contained `code` argument\", () => {",
											"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/oauth2/authorize?client_id={{confidential_client_id}}&response_type=none&id_token_hint={{id_token}}&prompt=none&redirect_uri={{redirect_uri}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}"
										},
										{
											"key": "response_type",
											"value": "none"
										},
										{
											"key": "id_token_hint",
											"value": "{{id_token}}"
										},
										{
											"key": "prompt",
											"value": "none"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										}
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 5b: Check id_token Session (localhost)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//var jsonData = pm.response.json();\r",
											"const querystring = require('querystring');\r",
											"let params = pm.response.headers.get('Location').split('?');\r",
											"if(pm.response.code == 302)\r",
											"{\r",
											"    if (params.length > 1) {\r",
											"        console.log(querystring.parse(params[1]).error_description);\r",
											"        pm.test(\"Response from authorize endpoint contained `error_description` argument in Location header\", () => {\r",
											"            pm.expect(querystring.parse(params[1]).error_description).to.be.a(\"string\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Session still valid\");\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function base64URLEncode(words) {",
											"   return CryptoJS.enc.Base64.stringify(words)",
											"   .replace(/\\+/g, '-')",
											"   .replace(/\\//g, '_')",
											"   .replace(/=/g, '');",
											"}",
											"const code_verifier = base64URLEncode(CryptoJS.lib.WordArray.random(50));",
											"const code_challenge = base64URLEncode(CryptoJS.SHA256(code_verifier));",
											"",
											"pm.globals.set(\"code_challenge\", code_challenge);",
											"pm.globals.set(\"code_verifier\", code_verifier);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "amlbcookie=01",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/oauth2/authorize?client_id={{confidential_client_id}}&response_type=none&id_token_hint={{id_token}}&prompt=none&redirect_uri={{redirect_uri}}",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}"
										},
										{
											"key": "response_type",
											"value": "none"
										},
										{
											"key": "id_token_hint",
											"value": "{{id_token}}"
										},
										{
											"key": "prompt",
											"value": "none"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										}
									]
								},
								"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user."
							},
							"response": []
						},
						{
							"name": "Step 6a: Refresh Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=4.0, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/sessions/?_action=getSessionInfoAndResetIdleTime",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "getSessionInfoAndResetIdleTime"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6b: Refresh Tokens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"if(pm.response.code == 200)",
											"{",
											"        pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"        pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
											"        pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"}",
											"",
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains refresh_token\", function () {",
											"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"description": "The refresh token.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"access_token"
									]
								},
								"description": "Use a refresh token to ask for a new access token."
							},
							"response": []
						},
						{
							"name": "Step 7a: Log out specific Demo User Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7b: Log out all Demo User Sessions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=5.1, protocol=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{demo_username}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_base}}/json/sessions/?_action=logoutByUser",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logoutByUser"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7c: Revoke the Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TESTS",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"description": "The refresh token to revoke.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/token/revoke",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"token",
										"revoke"
									]
								},
								"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
							},
							"response": []
						}
					],
					"description": "The Authorization Code Grant, when combined with the PKCE standard (RFC 7636), is used when a client, usually a mobile or a JavaScript application, requires access to protected resources.\n\nThe flow is similar to the regular Authorization Code Grant type, but the client must generate a code that will be part of the communication between the client and the authorization server. This code mitigates against interception attacks performed by malicious users.\n\nSince communication between the client and the authorization server is not secure, clients are usually public so their secrets do not get compromised. Also, browser-based clients making OAuth 2.0 requests to different domains must implement Cross-Origin Resource Sharing (CORS) calls to access OAuth 2.0 resources in different domains.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Implicit Grant",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Access Token and ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function QueryStringToJSON(qs) {            ",
											"    var keyvaluepairs = qs.slice(qs.indexOf(\"#\")+1).split('&');",
											"    ",
											"    var result = {};",
											"    keyvaluepairs.forEach(function(keyvaluepair) {",
											"        keyvaluepair = keyvaluepair.split('=');",
											"        result[keyvaluepair[0]] = decodeURIComponent(keyvaluepair[1] || '');",
											"    });",
											"    return JSON.parse(JSON.stringify(result));",
											"}",
											"",
											"if(pm.response.code == 302)",
											"{",
											"   let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.collectionVariables.set(\"access_token\", redirectLocation.access_token);",
											"    pm.collectionVariables.set(\"id_token\", redirectLocation.id_token);",
											"}",
											"else",
											"{",
											"    pm.collectionVariables.set(\"access_token\", \"ERROR: 302 not returned!\");",
											"    pm.collectionVariables.set(\"id_token\", \"ERROR: 302 not returned!\");",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is NOT enabled in Postman (Status code is 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Response `Location` header contained `code` parameter\", () => {",
											"    let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.expect(redirectLocation.access_token).to.be.a(\"string\");",
											"    pm.expect(redirectLocation.id_token).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "token id_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "profile openid",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "Decision that grants access to the access token. When using a browser, the user would consent that the client can access their information. ",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"description": "SSO token of the user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Get ID Token Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `aud`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"public_client_id\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{id_token}}",
											"description": "ID token you want the information from",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{public_client_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve information about the ID token. For example, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 4: Log out the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "iPlanetDirectoryPro",
										"value": "{{SSOToken}}",
										"type": "text"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"realms",
										"{{sub_realm}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "The Implicit grant is designed for public clients that run inside the resource owner's user-agent, for example, JavaScript applications.\n\nSince applications running in the user-agent are considered less trusted than applications running in servers, the authorization server will never issue refresh tokens in this flow. There is a security impact of cross-site scripting (XSS) attacks that could leak the access token to other systems, and implement Cross-Origin Resource Sharing (CORS) to make OAuth 2.0 requests to different domains.\n\nDue to the security implications of this flow, it is recommended to use the Authorization Code grant with PKCE flow whenever possible.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Hybrid Grant",
					"item": [
						{
							"name": "Step 1: Log in as the Demo User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
											"{",
											"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{demo_username}}"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{demo_password}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-API-Version",
										"value": "resource=2.1"
									}
								],
								"url": {
									"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"json",
										"{{sub_realm}}",
										"authenticate"
									]
								},
								"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
							},
							"response": []
						},
						{
							"name": "Step 2: Get an Authorization Code and an ID token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function QueryStringToJSON(qs) {            ",
											"    var keyvaluepairs = qs.slice(qs.indexOf(\"#\")+1).split('&');",
											"    ",
											"    var result = {};",
											"    keyvaluepairs.forEach(function(keyvaluepair) {",
											"        keyvaluepair = keyvaluepair.split('=');",
											"        result[keyvaluepair[0]] = decodeURIComponent(keyvaluepair[1] || '');",
											"    });",
											"    return JSON.parse(JSON.stringify(result));",
											"}",
											"",
											"if(pm.response.code == 302)",
											"{",
											"   let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.collectionVariables.set(\"id_token\", redirectLocation.id_token);",
											"    pm.collectionVariables.set(\"authorization_code\", redirectLocation.code);",
											"}",
											"else",
											"{",
											"    pm.collectionVariables.set(\"id_token\", \"ERROR: 302 not returned!\");",
											"    pm.collectionVariables.set(\"authorization_code\", \"ERROR: 302 not returned!\");",
											"}",
											"",
											"// TESTS",
											"",
											"pm.test(\"Follow redirects is NOT enabled in Postman (Status code is 302)\", () => {",
											"  // If response was 302, ensure Postman is following redirects.  ",
											"  pm.response.to.have.status(302);",
											"});",
											"",
											"pm.test(\"Response `Location` header contained `code` parameter\", () => {",
											"    let redirectLocation = QueryStringToJSON(pm.response.headers.get(\"Location\"));",
											"    pm.expect(redirectLocation.id_token).to.be.a(\"string\");",
											"    pm.expect(redirectLocation.code).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "iPlanetDirectoryPro={{SSOToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "id_token code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "profile openid write",
											"description": "Decision that grants access to the access token. When using a browser, the user would consent that the client can access their information. ",
											"type": "text"
										},
										{
											"key": "decision",
											"value": "allow",
											"description": "SSO token of the user, to protect against cross-site request forgery.",
											"type": "text"
										},
										{
											"key": "csrf",
											"value": "{{SSOToken}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "abc123",
											"description": "Random string to protect against cross-site request forgery",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "123abc",
											"description": "Random string to protect against replay attacks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/authorize",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"authorize"
									]
								},
								"description": "As the first step of the Hybrid flow, request an ID token and an authorization code.\n\nThe application can use the ID token straight away to process the user's identity, and requesting an authorization code instead of an access token keeps the later secure, since it would not be returned in the fragment."
							},
							"response": []
						},
						{
							"name": "Step 3: Exchange the Authorization Code for an Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if(pm.response.code == 200)",
											"{",
											"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
											"    pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
											"}",
											"",
											"// Tests",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response contains id_token\", function () {",
											"     pm.expect(jsonData.id_token).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"description": "Authorization code obtained during the hybrid flow",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "As the second step of the flow, exchange the authorization code for an access token, just like in the Authorization Code Grant flow."
							},
							"response": []
						},
						{
							"name": "Step 4: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"description": "Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						},
						{
							"name": "Step 5: Get ID Token Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"confidential_client_id\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{id_token}}",
											"description": "ID token you want the information from",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{confidential_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve information about the ID token. For example, the user that authorized the token, and the expiry time."
							},
							"response": []
						}
					],
					"description": "The Hybrid grant is a two-step flow designed for clients that require flexibility when requesting ID, access, and refresh tokens. \n\nRequesting an access token during the first step exposes the token in the redirection fragment, just like during the Implicit grant flow.\n     \nAlso, you must consider the security impact of cross-site scripting (XSS) attacks that could leak the ID and access tokens to other systems, and implement Cross-Origin Resource Sharing (CORS) to make OAuth 2.0/OpenID Connect requests to different domains.\n\nDue to the security implications, ForgeRock recommends not to request access tokens during the first step of this flow.\n\nIf the relying party is a public client, you can use the PKCE specification to mitigate against interception attacks performed by malicious users. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "OpenID Connect Flows.\n\nNote: The Backchannel (CIBA) flow is not included\nsince it requires push notifications to work."
		},
		{
			"name": "Refresh Token Flow",
			"item": [
				{
					"name": "Step 1: Log in as the Demo User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
									"{",
									"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
									"}",
									"",
									"// Tests",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-OpenAM-Username",
								"value": "{{demo_username}}"
							},
							{
								"key": "X-OpenAM-Password",
								"value": "{{demo_password}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-API-Version",
								"value": "resource=2.1"
							}
						],
						"url": {
							"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"json",
								"{{sub_realm}}",
								"authenticate"
							]
						},
						"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
					},
					"response": []
				},
				{
					"name": "Step 2: Get Authorization Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if(pm.response.code == 200)",
									"{",
									"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
									"}",
									"",
									"// TESTS",
									"",
									"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
									"  // If response was 302, ensure Postman is following redirects.  ",
									"  pm.response.to.not.have.status(302);",
									"});",
									"",
									"pm.test(\"Response from httpbin contained `code` argument\", () => {",
									"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "iPlanetDirectoryPro={{SSOToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "scope",
									"value": "openid profile",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{confidential_client_id}}",
									"type": "text"
								},
								{
									"key": "csrf",
									"value": "{{SSOToken}}",
									"description": "SSO token of the user, to protect against cross-site request forgery",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "text"
								},
								{
									"key": "decision",
									"value": "allow",
									"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/authorize",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"oauth2",
								"realms",
								"{{sub_realm}}",
								"authorize"
							]
						},
						"description": "Make a call to the authorization server's authorization endpoint, specifying the SSO token of the user in a cookie."
					},
					"response": []
				},
				{
					"name": "Step 3: Exchange the Authentication Code for an Access Token and a Refresh Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if(pm.response.code == 200)",
									"{",
									"        pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
									"        pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"}",
									"",
									"//TESTS",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains refresh_token\", function () {",
									"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"description": "The authentication code.",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{confidential_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"oauth2",
								"realms",
								"{{sub_realm}}",
								"access_token"
							]
						},
						"description": "Authenticate with the authorization server using the details of the confidential client and the authentication code recieved in the previous call.\n"
					},
					"response": []
				},
				{
					"name": "Step 4: Refresh the Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if(pm.response.code == 200)",
									"{",
									"        pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
									"        pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"        pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
									"}",
									"",
									"//TESTS",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Response contains refresh_token\", function () {",
									"    pm.expect(jsonData.refresh_token).to.be.a(\"string\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"description": "The refresh token.",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{confidential_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"oauth2",
								"realms",
								"{{sub_realm}}",
								"access_token"
							]
						},
						"description": "Use a refresh token to ask for a new access token."
					},
					"response": []
				},
				{
					"name": "Step 5: Revoke the Refresh Token ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//TESTS",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"description": "The refresh token to revoke.",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{confidential_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/token/revoke",
							"host": [
								"{{URL_base}}"
							],
							"path": [
								"oauth2",
								"realms",
								"{{sub_realm}}",
								"token",
								"revoke"
							]
						},
						"description": "Revoke the refresh token created in the previous call. Revoking a refresh token also revokes any other associated tokens that were issued with the same authorization grant. "
					},
					"response": []
				}
			],
			"description": "Refresh token flows.\n\nThis example uses the Authorization Code Grant flow to obtain the first access and refresh tokens.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Token Exchange Flows",
			"item": [
				{
					"name": "Prerequisites",
					"item": [
						{
							"name": "Step 1: Additional Configuration",
							"item": [
								{
									"name": "Step 1: Log In as an Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200)",
													"{",
													"    pm.collectionVariables.set(\"adminSSOToken\", jsonData.tokenId);",
													"}",
													"",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains tokenId\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('tokenId');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											},
											{
												"key": "X-OpenAM-Username",
												"value": "{{admin_username}}",
												"type": "text"
											},
											{
												"key": "X-OpenAM-Password",
												"value": "{{admin_password}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/realms/root/authenticate",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"root",
												"authenticate"
											]
										},
										"description": "Log in to AM as an administrative user to create the objects and identities in AM that the collection requires."
									},
									"response": []
								},
								{
									"name": "Step 2: Add OAuth 2.0 may_act claim Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"if(pm.response.code == 201)",
													"{",
													"    pm.collectionVariables.set(\"script_id\", jsonData._id);",
													"}",
													"",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 201.\", () => {",
													"  pm.expect(pm.response.code).to.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-API-Version",
												"value": "protocol=1.0,resource=1.0",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"_id\": null,\n    \"name\": \"Example may_act Claim Script\",\n    \"script\": \"aW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUNCnRva2VuLnNldE1heUFjdCgNCiAgSnNvblZhbHVlLmpzb24oSnNvblZhbHVlLm9iamVjdCgNCiAgICBKc29uVmFsdWUuZmllbGQoImNsaWVudF9pZCIsICJzZXJ2aWNlQ29uZmlkZW50aWFsQ2xpZW50IiksDQogICAgSnNvblZhbHVlLmZpZWxkKCJzdWIiLCAiKHVzciFGb3JnZXJvY2tEZW1vMikiKSkpKTs=\",\n    \"language\": \"GROOVY\",\n    \"context\": \"OAUTH2_MAY_ACT\",\n    \"description\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_base}}/json/{{sub_realm}}/scripts/?_action=create",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"{{sub_realm}}",
												"scripts",
												""
											],
											"query": [
												{
													"key": "_action",
													"value": "create"
												}
											]
										},
										"description": "Creates a new OAuth2 Access Token may_act script that can be used to add a may_act claim to OAuth2 and OIDC tokens."
									},
									"response": []
								},
								{
									"name": "Step 3: Create a Second Demo User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"pm.test(\"Status code is 201.\", () => {",
													"  pm.expect(pm.response.code).to.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept-api-version",
												"value": "protocol=2.1,resource=3.0"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{demo_username_2}}\",\n    \"userpassword\": \"{{demo_password}}\",\n    \"mail\": \"forgerockdemo2@example.com\"\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/users/?_action=create",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"users",
												""
											],
											"query": [
												{
													"key": "_action",
													"value": "create"
												}
											]
										},
										"description": "Using the SSO Token you received as an Adminstrator, create a second demo user to use in the Token Exchange Flow."
									},
									"response": []
								},
								{
									"name": "Step 4: Update OAuth 2.0 Provider Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{adminSSOToken}}",
												"type": "text"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"advancedOAuth2Config\":{\n      \"responseTypeClasses\":[\n         \"code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler\",\n         \"device_code|org.forgerock.oauth2.core.TokenResponseTypeHandler\",\n         \"token|org.forgerock.oauth2.core.TokenResponseTypeHandler\",\n         \"id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler\"\n      ],\n      \"grantTypes\":[\n         \"implicit\",\n         \"refresh_token\",\n         \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n         \"password\",\n         \"client_credentials\",\n         \"urn:ietf:params:oauth:grant-type:device_code\",\n         \"authorization_code\",\n         \"urn:openid:params:grant-type:ciba\",\n         \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n         \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n         \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n   },\n    \"coreOAuth2Config\":{\n      \"accessTokenMayActScript\":\"{{script_id}}\",\n      \"oidcMayActScript\":\"{{script_id}}\"\n   }\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/services/oauth-oidc",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"realm-config",
												"services",
												"oauth-oidc"
											]
										},
										"description": "Add the may_act script to the OAuth 2.0 provider service configuration."
									},
									"response": []
								},
								{
									"name": "Step 5: Create a User-Related Confidential  Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"pm.test(\"Status code is 201.\", () => {",
													"  pm.expect(pm.response.code).to.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Requested-With",
												"value": "ForgeRock Collection",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"coreOAuth2ClientConfig\": {  \n    \"userpassword\": \"{{client_secret}}\",\n     \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"{{redirect_uri}}\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"write\",\n        \"read\",\n        \"openid\"\n      ]\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": false,\n      \"value\":  \"client_secret_post\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/agents/OAuth2Client/{{user_related_client_id}}",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"realm-config",
												"agents",
												"OAuth2Client",
												"{{user_related_client_id}}"
											]
										},
										"description": "The token exchange flows will use this client to request subject tokens."
									},
									"response": []
								},
								{
									"name": "Step 6: Create a Service-Related Confidential  Client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"pm.test(\"Status code is 201.\", () => {",
													"  pm.expect(pm.response.code).to.eql(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Requested-With",
												"value": "ForgeRock Collection",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{adminSSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"coreOAuth2ClientConfig\": {  \n    \"userpassword\": \"{{client_secret}}\",\n     \"redirectionUris\": {\n      \"inherited\": false,\n      \"value\": [\n        \"{{redirect_uri}}\"\n      ]\n    },\n    \"scopes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"read\",\n        \"write\",\n        \"transfer\"\n      ]\n    }\n  },\n  \"advancedOAuth2ClientConfig\": {\n    \"grantTypes\": {\n      \"inherited\": false,\n      \"value\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"password\",\n        \"client_credentials\",\n        \"refresh_token\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"urn:ietf:params:oauth:grant-type:token-exchange\"\n      ]\n    },\n    \"tokenEndpointAuthMethod\": {\n      \"inherited\": false,\n      \"value\":  \"client_secret_post\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/realm-config/agents/OAuth2Client/{{service_related_client_id}}",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"realm-config",
												"agents",
												"OAuth2Client",
												"{{service_related_client_id}}"
											]
										},
										"description": "The token exchange flows will use this client to request token impersonation or delegation."
									},
									"response": []
								},
								{
									"name": "Step 7: Log out the Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{adminSSOToken}}",
												"type": "text"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"sessions",
												""
											],
											"query": [
												{
													"key": "_action",
													"value": "logout"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Additional configuration required in AM to run the token exchange flows.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 2: Run the Authorization Code Grant for the Demo user",
							"item": [
								{
									"name": "Step 1: Log in as the Demo User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
													"{",
													"    pm.collectionVariables.set(\"SSOToken\", jsonData.tokenId);",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-OpenAM-Username",
												"value": "{{demo_username}}"
											},
											{
												"key": "X-OpenAM-Password",
												"value": "{{demo_password}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"{{sub_realm}}",
												"authenticate"
											]
										},
										"description": "Log in as the Demo user to obtain a session token for them. This token will be used in the following calls."
									},
									"response": []
								},
								{
									"name": "Step 2: Get Authorization Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"if(pm.response.code == 200)",
													"{",
													"    if(jsonData.args.code && jsonData.args.code != \"\") {",
													"        pm.collectionVariables.set(\"authorization_code\", jsonData.args.code);",
													"    }",
													"}",
													"",
													"// TESTS",
													"",
													"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
													"  // If response was 302, ensure Postman is following redirects.  ",
													"  pm.response.to.not.have.status(302);",
													"});",
													"",
													"pm.test(\"Response from httpbin contained `code` argument\", () => {",
													"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{SSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "scope",
													"value": "write read openid",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{SSOToken}}",
													"description": "SSO token of the user, to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "state",
													"value": "abc123",
													"description": "Random string to protect against cross-site request forgery",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "123abc",
													"description": "Random string to protect against replay attacks",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/authorize",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"authorize"
											]
										},
										"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
									},
									"response": []
								},
								{
									"name": "Step 3: Exchange the Authorization Code for an Access Token and an ID token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (pm.response.code == 200 && jsonData.access_token)",
													"{",
													"   pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
													"   pm.collectionVariables.set(\"id_token\", jsonData.id_token);",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains access_token\", function () {",
													"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
													"    pm.expect(jsonData.id_token).to.be.a(\"string\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{SSOToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"description": "The authentication code.",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"access_token"
											]
										},
										"description": "Make a call to the authorization server to exchange the authorization code for an access token and an ID token"
									},
									"response": []
								},
								{
									"name": "Step 4: Introspect the Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"const jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains correct `client_id`.\", function () {",
													"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"user_related_client_id\"));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"description": "Access token you want to introspect",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"{{sub_realm}}",
												"introspect"
											]
										},
										"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
									},
									"response": []
								},
								{
									"name": "Step 5: Get the ID Token Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains correct `client_id`.\", function () {",
													"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"user_related_client_id\"));",
													"});",
													"",
													"pm.test(\"Subject is demo_username\", function () {",
													"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
													"});",
													"",
													"pm.test(\"Response contains `may act`\", function () {",
													"     pm.expect(jsonData.may_act).to.be.an(\"object\")",
													"});",
													"",
													"pm.test(\"May Act as service_related_client)id\", function () {",
													"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
													"});",
													"",
													"pm.test(\"May Act as demo_username_2\", function () {",
													"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id_token",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"idtokeninfo"
											]
										},
										"description": "Retrieve metadata about the ID token using the idtokeninfo endpoint,"
									},
									"response": []
								},
								{
									"name": "Step 6: Log out the Demo User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{SSOToken}}",
												"type": "text"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"sessions",
												""
											],
											"query": [
												{
													"key": "_action",
													"value": "logout"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Run the Authorization Code Grant for the Demo user to obtain an access token that can later be exchanged in the impersonation and the delegation flows.  Note that the token is requested by the {{user_related_confidential_client}}, and will be exchanged by the {{service_related_confidential_client}}.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 3:  Run the Authorization Code Grant for the Second Demo User",
							"item": [
								{
									"name": "Step 1: Log in as the Second Demo User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 && jsonData.tokenId.length >3)",
													"{",
													"    pm.collectionVariables.set(\"SSOToken_2\", jsonData.tokenId);",
													"}",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-OpenAM-Username",
												"value": "{{demo_username_2}}"
											},
											{
												"key": "X-OpenAM-Password",
												"value": "{{demo_password}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/{{sub_realm}}/authenticate",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"{{sub_realm}}",
												"authenticate"
											]
										},
										"description": "Log in as the Second Demo user to obtain a session token for them. This token will be used in the following calls."
									},
									"response": []
								},
								{
									"name": "Step 2: Get Second Authorization Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"if(pm.response.code == 200)",
													"{",
													"    if(jsonData.args.code && jsonData.args.code != \"\") {",
													"        pm.collectionVariables.set(\"authorization_code_2\", jsonData.args.code);",
													"    }",
													"}",
													"// TESTS",
													"",
													"pm.test(\"Follow redirects is enabled in Postman (Status code not 302)\", () => {",
													"  // If response was 302, ensure Postman is following redirects.  ",
													"  pm.response.to.not.have.status(302);",
													"});",
													"",
													"pm.test(\"Response from httpbin contained `code` argument\", () => {",
													"    pm.expect(jsonData.args.code).to.be.a(\"string\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "iPlanetDirectoryPro={{SSOToken_2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "scope",
													"value": "write openid",
													"type": "text"
												},
												{
													"key": "response_type",
													"value": "code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"type": "text"
												},
												{
													"key": "decision",
													"value": "allow",
													"description": "Decision that grants access to the authentication code. When using a browser, the user would consent that the client can access their information.",
													"type": "text"
												},
												{
													"key": "csrf",
													"value": "{{SSOToken_2}}",
													"description": "SSO token of the user, to protect against cross-site request forgery.",
													"type": "text"
												},
												{
													"key": "nonce",
													"value": "123abc",
													"description": "Random string to protect against replay attacks",
													"type": "text"
												},
												{
													"key": "state",
													"value": "abc123",
													"description": "Random string to protect against cross-site request forgery",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/authorize",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"authorize"
											]
										},
										"description": "Get the authorization code by making a call to the authorization server's authorization endpoint, specifying the SSO token of the user.\n"
									},
									"response": []
								},
								{
									"name": "Step 3: Exchange the Second Authorization Code for a Second Access Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (pm.response.code == 200 && jsonData.access_token)",
													"{",
													"   pm.collectionVariables.set(\"access_token_2\", jsonData.access_token);",
													"   pm.collectionVariables.set(\"id_token_2\", jsonData.id_token);",
													"}",
													"",
													"",
													"// Tests",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains access_token\", function () {",
													"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
													"     pm.expect(jsonData.id_token).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{SSOToken_2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code_2}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"access_token"
											]
										},
										"description": "Make a call to the authorization server to exchange the authorization code for an access token."
									},
									"response": []
								},
								{
									"name": "Step 4: Introspect the Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"const jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains correct `client_id`.\", function () {",
													"    pm.expect(jsonData.client_id).to.eql(pm.collectionVariables.get(\"user_related_client_id\"));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "{{access_token_2}}",
													"description": "Access token you want to introspect",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/{{sub_realm}}/introspect",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"{{sub_realm}}",
												"introspect"
											]
										},
										"description": "Retrieve information about the active access token. For example, approved scopes, the user that authorized the token, and the expiry time."
									},
									"response": []
								},
								{
									"name": "Step 5: Get the ID Token Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"Response contains correct `client_id`.\", function () {",
													"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"user_related_client_id\"));",
													"});",
													"",
													"pm.test(\"Subject is demo_username_2\", function () {",
													"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
													"});",
													"",
													"pm.test(\"Response contains `may act`\", function () {",
													"     pm.expect(jsonData.may_act).to.be.an(\"object\")",
													"});",
													"",
													"pm.test(\"May Act as service_related_client_id\", function () {",
													"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
													"});",
													"",
													"pm.test(\"May Act as demo_username_2\", function () {",
													"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id_token",
													"value": "{{id_token_2}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{user_related_client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"oauth2",
												"realms",
												"{{sub_realm}}",
												"idtokeninfo"
											]
										},
										"description": "Retrieve metadata about the ID token using the idtokeninfo endpoint,"
									},
									"response": []
								},
								{
									"name": "Step 6: Log out the Second Demo User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Tests",
													"",
													"pm.test(\"Status code is 200.\", () => {",
													"  pm.expect(pm.response.code).to.eql(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "iPlanetDirectoryPro",
												"value": "{{SSOToken_2}}",
												"type": "text"
											},
											{
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL_base}}/json/realms/{{sub_realm}}/sessions/?_action=logout",
											"host": [
												"{{URL_base}}"
											],
											"path": [
												"json",
												"realms",
												"{{sub_realm}}",
												"sessions",
												""
											],
											"query": [
												{
													"key": "_action",
													"value": "logout"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Run the Authorization Code Grant for the second Demo user to obtain an access token that can later be exchanged in the delegation flow.  Note that the token is requested by the {{user_related_confidential_client}}, and will be exchanged by the {{service_related_confidential_client}}.\n\nNOTE: Delegation needs two sets of tokens. If you haven't run the Authorization Code Grant for the Demo User, included in the Prerequisites folder of the Token Exchange Flows, run it now as well.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Impersonation: Access Token from Access Token",
					"item": [
						{
							"name": "Step 1: Request Impersonation Token Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"impersonation_token\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an access token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:access_token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{access_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "transfer read write",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Requests an impersonation token so that the ForgeRock confidential client can impersonate Demo User."
							},
							"response": []
						},
						{
							"name": "Step 2: Introspect the Impersonation Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// TESTS",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"User ID is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains may_act\", function () {",
											"    pm.expect(jsonData.may_act).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"May Act as confidential_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.include(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{impersonation_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Impersonation: Access Token from ID Token",
					"item": [
						{
							"name": "Step 5: Exchange ID Token for Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"  pm.collectionVariables.set(\"access_token_from_id_token\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an access token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eql(\"urn:ietf:params:oauth:token-type:access_token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Get an Access token from the Token Exchange endpoint using the ID Token."
							},
							"response": []
						},
						{
							"name": "Step 6: Introspect the Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// TESTS",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"User ID is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains `may_act`\", function () {",
											"    pm.expect(jsonData.may_act).to.be.an(\"object\");",
											"});",
											"",
											"",
											"pm.test(\"May Act as service_related_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_from_id_token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"introspect"
									]
								},
								"description": "Retrieve metadata about the active access token, such as, approved scopes, the user that authorized the token, and the expiry time."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Impersonation: ID Token from ID Token",
					"item": [
						{
							"name": "Step 1: Exchange ID Token for ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"exchanged_id_token\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an ID token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:id_token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Exchange Acess token from prerequisits for an ID token using token exchange and save to exchanged_id_token"
							},
							"response": []
						},
						{
							"name": "Step 2: Get ID Token information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"Subject is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains `may act`\", function () {",
											"     pm.expect(jsonData.may_act).to.be.an(\"object\")",
											"});",
											"",
											"pm.test(\"May Act as confidential_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{exchanged_id_token}}",
											"description": "The Implicit grant Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"description": "The ID of the Public OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The secret of the Public OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve metadata about the excahnged ID token using the token info endpoint"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Impersonation: ID Token from Access Token",
					"item": [
						{
							"name": "Step 1: Exchange Access Token for ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"   pm.collectionVariables.set(\"exchanged_id_token\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an ID token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:id_token\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{access_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Exchange Acess token from prerequisits for an ID token using token exchange and save to exchanged_id_token"
							},
							"response": []
						},
						{
							"name": "Step 2: Get ID Token information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"Subject is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains `may act`\", function () {",
											"     pm.expect(jsonData.may_act).to.be.an(\"object\")",
											"});",
											"",
											"pm.test(\"May Act as service_related_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{exchanged_id_token}}",
											"description": "The Implicit grant Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"description": "The ID of the Public OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The secret of the Public OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve metadata about the excahnged ID token using the token info endpoint"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delegation: Access Token+Access Token  to Access Token",
					"item": [
						{
							"name": "Step 1: Request Delegation Token Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"  pm.collectionVariables.set(\"delegation_token_1\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an access token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:access_token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{access_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "actor_token",
											"value": "{{access_token_2}}",
											"type": "text"
										},
										{
											"key": "actor_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Request a delegation token so that Demo User can delegate to Demo User 2."
							},
							"response": []
						},
						{
							"name": "Step 2: Introspect the Delegated Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// TESTS",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Subject is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains may_act\", function () {",
											"    pm.expect(jsonData.may_act).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});",
											"",
											"pm.test(\"Response contains act\", function () {",
											"    pm.expect(jsonData.act).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"May Act as confidential_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{delegation_token_1}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"introspect"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delegation: Delegated Access Token + Access Token to ID Token",
					"item": [
						{
							"name": "Step 1: Request a Delegation Token from the Previously-Delegated Token in Step 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"  pm.collectionVariables.set(\"delegation_token_2\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an access token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:id_token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{delegation_token_1}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										},
										{
											"key": "actor_token",
											"value": "{{access_token_2}}",
											"type": "text"
										},
										{
											"key": "actor_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Request another delegation token so that Demo User can delegate to Demo User 2 again."
							},
							"response": []
						},
						{
							"name": "Step 2: Get Delegated ID Token information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Tests",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains correct `client_id`.\", function () {",
											"    pm.expect(jsonData.aud).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"Subject is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains `may act`\", function () {",
											"     pm.expect(jsonData.may_act).to.be.an(\"object\")",
											"});",
											"",
											"pm.test(\"May Act as service_related_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id_token",
											"value": "{{delegation_token_2}}",
											"description": "The Implicit grant Access token you want to introspect.",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"description": "The ID of the Public OAuth Client.",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"description": "The secret of the Public OAuth Client.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/idtokeninfo",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"idtokeninfo"
									]
								},
								"description": "Retrieve metadata about the excahnged ID token using the token info endpoint"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delegation: ID Token+ID Token to Access Token",
					"item": [
						{
							"name": "Step 1: Request Delegation Token Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"if(pm.response.code == 200)",
											"{",
											"  pm.collectionVariables.set(\"delegation_token_1\", jsonData.access_token);",
											"}",
											"",
											"//TESTS ",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Response contains access_token\", function () {",
											"    pm.expect(jsonData.access_token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token is an access token\", function () {",
											"    pm.expect(jsonData.issued_token_type).to.eq(\"urn:ietf:params:oauth:token-type:access_token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:token-exchange",
											"type": "text"
										},
										{
											"key": "subject_token",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "subject_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "write read",
											"type": "text"
										},
										{
											"key": "requested_token_type",
											"value": "urn:ietf:params:oauth:token-type:access_token",
											"type": "text"
										},
										{
											"key": "actor_token",
											"value": "{{id_token_2}}",
											"type": "text"
										},
										{
											"key": "actor_token_type",
											"value": "urn:ietf:params:oauth:token-type:id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/access_token",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"access_token"
									]
								},
								"description": "Request a delegation token so that Demo User can delegate to Demo User 2."
							},
							"response": []
						},
						{
							"name": "Step 2: Introspect the Delegation Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// TESTS",
											"",
											"pm.test(\"Status code is 200.\", () => {",
											"  pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"Subject is demo_username\", function () {",
											"    pm.expect(jsonData.sub).to.include(pm.collectionVariables.get(\"demo_username\"));",
											"});",
											"",
											"pm.test(\"Response contains may_act\", function () {",
											"    pm.expect(jsonData.may_act).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});",
											"",
											"pm.test(\"Response contains act\", function () {",
											"    pm.expect(jsonData.act).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"May Act as service_related_client_id\", function () {",
											"    pm.expect(jsonData.may_act.client_id).to.eql(pm.collectionVariables.get(\"service_related_client_id\"));",
											"});",
											"",
											"pm.test(\"May Act as demo_username_2\", function () {",
											"    pm.expect(jsonData.may_act.sub).to.include(pm.collectionVariables.get(\"demo_username_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{delegation_token_1}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{service_related_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL_base}}/oauth2/realms/{{sub_realm}}/introspect",
									"host": [
										"{{URL_base}}"
									],
									"path": [
										"oauth2",
										"realms",
										"{{sub_realm}}",
										"introspect"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Token Exchange flows for access tokens and ID tokens."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL_base",
			"value": "https://am.example.com:8443/am"
		},
		{
			"key": "redirect_uri",
			"value": "https://httpbin.org/anything"
		},
		{
			"key": "sub_realm",
			"value": "mySubRealm"
		},
		{
			"key": "admin_username",
			"value": "amadmin"
		},
		{
			"key": "admin_password",
			"value": "forgerock"
		},
		{
			"key": "demo_username",
			"value": "ForgerockDemo"
		},
		{
			"key": "demo_password",
			"value": "5up35tr0nG!"
		},
		{
			"key": "demo_username_2",
			"value": "ForgerockDemo2"
		},
		{
			"key": "confidential_client_id",
			"value": "forgerockDemoConfidentialClient"
		},
		{
			"key": "client_secret",
			"value": "forgerock"
		},
		{
			"key": "public_client_id",
			"value": "forgerockDemoPublicClient"
		},
		{
			"key": "SSOToken",
			"value": ""
		},
		{
			"key": "adminSSOToken",
			"value": ""
		},
		{
			"key": "authorization_code",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "authentication_code",
			"value": ""
		},
		{
			"key": "implicitGrantAccessToken",
			"value": ""
		},
		{
			"key": "device_code",
			"value": ""
		},
		{
			"key": "user_code",
			"value": ""
		},
		{
			"key": "SSOToken_2",
			"value": ""
		},
		{
			"key": "authorization_code_2",
			"value": ""
		},
		{
			"key": "access_token_2",
			"value": ""
		},
		{
			"key": "script_id",
			"value": ""
		},
		{
			"key": "impersonation_token",
			"value": ""
		},
		{
			"key": "delegation_token_1",
			"value": ""
		},
		{
			"key": "delegation_token_2",
			"value": ""
		},
		{
			"key": "exchanged_id_token",
			"value": ""
		},
		{
			"key": "access_token_from_id_token",
			"value": ""
		},
		{
			"key": "id_token",
			"value": ""
		},
		{
			"key": "code_challenge",
			"value": ""
		},
		{
			"key": "SSOToken_2",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "code_verifier",
			"value": ""
		},
		{
			"key": "code",
			"value": ""
		},
		{
			"key": "implicitGrantIdToken",
			"value": ""
		},
		{
			"key": "user_related_client_id",
			"value": "customerConfidentialClient"
		},
		{
			"key": "service_related_client_id",
			"value": "serviceConfidentialClient"
		},
		{
			"key": "id_token_2",
			"value": ""
		},
		{
			"key": "request_uri",
			"value": ""
		}
	]
}